Домашка 0

===Сервисы и что они делают:=================================================================

1. ates_auth - сервис аутентификации (по клюву), при успешной аутентификации отдает токен, по которому можно ходить в другие сервисы.
	ates_auth_bd - БД хранит биометрию попугаев (параметры клювов)
	
	Инфо потоки:
	Обслуживает запросы:
	- проверка валидности токена
	
2. ates_user_service - управление пользователями, создание, блокировка, назначение полномиочий и т.д., отдает список прав пользователей для авторизации доступа. 
	ates_user_db - БД пользователей и ролей ползователей
	
	Инфо потоки:
	Обслуживает запросы:
	- получение атрибутов пользователя
	- получение полномочий пользователя
	Генерит события:
	- блокировка пользователя
	- изменения атрибутов пользователя
	- изменени отзыв полномочий пользователя
	Слушает события:
	- входы/выходы пользователей в различные подсистемы (аудит)
	
3. ates_admin_web - UI для админов, доступ для админов, CRUD пользователей и другие админ задачи.
 
4. ates_task_web - Общий UI (дашборд) для работы с тасками
	
	Инфо потоки:
	Обслуживает запросы:
	- только обслуживание пользовательской активности
	Генерит запросы:
	- к ates_auth для проверки токена 
	- к ates_user_service для получения прав пользователей
	- к ates_task_service для работы с тасками (CRUD)
	- к ates_task_service по кнопке «заассайнить задачи»
	Слушает события:
	- изменения по пользователям от ates_user_service (например чтобы прекратить предоставлять доступ для заблокированного пользователя)
	- изменеия по таскам (если будем кешировать данные по таскам)
	Генерит события:
	- входы/выходы пользователей в систему (аудит)
	

5. ates_task_service - CRUD для таксков, назначение таксков, другое управление тасками
	ates_task_db - база по таскам, комментам, истории и т.д.
	
   Инфо потоки:
   Обслуживает запросы:
   - различные запросы данных по таскам
   Генерит запросы:
   - запрос к ates_task_pricing_service для рассчета стоимости таска
   - запрос к ates_task_assingment_service для выбора исполнителя задачи
   Слушает события:
   - 
   Генерит события:
   - События изменения стоимости тасков
   - События изменения исполнителя тасков
   - Событие изменения статуса таска (создание, закрытие и т.д.)
	
6. ates_task_pricing_service - сервис рассчитывает стоимость задачи
	Инфо потоки:
	Обслуживает запросы:
	- рассчет стоимости таска
	
	

7. ates_task_assingment_service - сервис выбирает испольнителя для задачи 
	Инфо потоки:
	Обслуживает запросы:
	- запрос для выбора исполнителя задачи от ates_task_service
	Генерит запросы:
	- запрос данных по пользователям к ates_user_service

8. ates_accounting_service - сервис закрывает операционный день, генерит проводки, обновляет балансы, готовит фин. отчеты за день
	ates_accounting_db - БД по счетам, проводкам, балансы
	Инфо потоки:
	Обслуживает запросы:
	- запросы от ates_accounting_web на получение различной инфы по бухгалтерии дляпостроения дашбордов
	Генерит запросы:
	- к ates_user_service для получения атрибутов пользователей (в выписки по счету нужно включить данные пользователя)
	Слушает события:
	- События от ates_user_service, если завели пользователя, то ему нужно открыть счет, если заблокировали пользователя, ему нужно закрыть счет.
	- События изменений по таскам от ates_task_service
	Генерит события:
	- события по всем движениям по счетам
	- событие закрытия опер дня
	
9. ates_accounting_web - UI к аккаунтингу

	Инфо потоки:
	Обслуживает запросы:
	- только обслуживание пользовательской активности
	Генерит запросы:
	- к ates_auth для проверки токена 
	- к ates_user_service для получения прав пользователей
	- к ates_accounting_service для получения различной инфы по аккаунтингу
	Слушает события:
	- изменения по пользователям от ates_user_service (например чтобы прекратить предоставлять доступ для заблокированного пользователя)
	- изменеия по счетам (если будем кешировать данные по счетам)
	Генерит события:
	- входы/выходы пользователей в систему (аудит)


10. ates_analytic_service - сервис для рассчета аналитических показателей
		ates_task_replica_db - реплика данных по таскам
		ates_accounting_replica_db - реплика данных по бухгалтерии
	Инфо потоки:
	Обслуживает запросы:
	- запросы от ates_analytic_web для показа различных дашбордов с аналитическими показателями
	Генерит запросы:
	- к ates_user_service для получения атрибутов пользователей
	Слушает события:
	- все события по таскам и бухгалтерии для наполнения реплик БД 
	Генерит события:
	- нет
	
11. ates_analytic_web - UI к сервису ананлитики 
	
	Инфо потоки:
	Обслуживает запросы:
	- только обслуживание пользовательской активности
	Генерит запросы:
	- к ates_auth для проверки токена 
	- к ates_user_service для получения прав пользователей
	- к ates_analytic_service для получения различной инфы для показа на дашбордах
	Слушает события:
	- изменения по пользователям от ates_user_service (например чтобы прекратить предоставлять доступ для заблокированного пользователя)
	Генерит события:
	- входы/выходы пользователей в систему (аудит)
	

===Инфо потоки:========================================================================================
Расписаны выше для каждого сервиса.
Там где события - это асинхронный режим
Там где речь идет о запросах - это синхронный режим или псевдоасинхронный режим (способ коммуникаций ассинхронный (через шину), но смысл синхронный, отправили запрос и потом поллим ответ с каким-то таймаутом)

===Проблемы:===========================================================================================

1. По оказоустойчивости надо смотреть что будет с одними сервисами в случаях если другие упадут и станут недоступны. 
Также единой точкой отказа является шина, поэтому нужно проавильно выбрать реализацию и правильно ее приготовить. При обработки сообщений нужно будет как следует подумать о стратегиях переобработки и переотправки и т.д.

2. Если говорить про реальные приложения с нагрузкой, то нужно подумать о распределении нагрузки на шину, о приоритетах трафика который через нее ходит. 
Например один сенрвис может сгенерить объемный, но малозначимый трафик, который не позволит более критичному трафику быть воврем доставленным и обработанным.
Например у нас будет два типа трафика: синхронный (псевдоасинхронный) и асинхронный.
Для синхронного более важна скорость ответа. 
Можно попробовать раскидать эти два типа трафика на разные экземпляры шин, которые будут работать на разных аппаратных мощностях и не будут мешать друг другу.
Ну это как один из примеров.

3. Нужно будет думать о том все ли асинхронные события были доставлены и обработаны. Например перед закрытием операционного дня в билинге нужно убедиться что все изменения по таскам за этот день доехали до сервиса биллинга и были обрабоатны, 
т.е. возможно перед закрытием дня можно предусмотреть 

4. Избегать распределенных транзакций. Т.е. если в процессе реализации наткнемся на ситуацию, где это нужно, то нужно будет что-то перепроектировать

5. Т.к. история ассинхронная, то нужно будет думать о порядке обработки событий от разных источников и думать как разрешать коллизии. В сучае одного источника все просто. а в случае разных сложнее. Например к нам прилетает событие от сервиса 
назначения тасков о том, что таск должен быть назначен на Попугая А, и прилетает событие от сервиса управления пользователями. что Попугай А заблокирован, что из этого было раньше, и как это правильно обработать по бизнес логике     

6. Наверное их намного больше)


===Спорные места: =======================================================================================
1.  Получилось целых 11 сервисов, решил пока по максимуму разделить на как можно более мелкие сервисы, скорее в качестве эксперимента. Возможен вариант сделать крупнее и объединить: 1+2+3, 4+5+6+7, 8+9, 10+11
Конкретно сервисы ates_task_pricing_service и ates_task_assingment_service выглядят раиболее сомнительно, например с текущим случайным алгоритмом выбора исполнителя с ates_task_assingment_service все должно быть ок, 
ему надо знать минимум информации для того чтобы делать свою работу. Но если потом алгоритм станет сложнее, например будет ограничение, что у одного попугая не может быть одновременно более 10 тасков, то нужно будет 
подтягивать намного больше информации, и тогда целесообразно этот сервис объединять с ates_task_service.

2. Репликация данных в подсистему аналитики. 
В целом это обычная практика, что в подсистему ананлитики льют данные из всех подсистем, чтобы хранилище данных и иметь возможность.
Способ репликации - сейчас нарисовано на схеме, что через те же события и шину как и все остальное, но на практике подмывает сделать через какие-то более целевые и производительные механизмы более низкого уровня, например на уровне СУБД, если например Oracle, то репликация GoldenGate например и т.д.   


